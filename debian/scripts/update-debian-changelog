#!/bin/bash

# ARG_OPTIONAL_SINGLE([distribution],[],[One of 'nightly', 'pull-request', or 'stable'])
# ARG_OPTIONAL_SINGLE([upstream],[],[Override the upstream version extracted from: configure.ac])
# ARG_OPTIONAL_SINGLE([revision],[],[Override the revision detected via: date --utc +'%s'])
# ARG_OPTIONAL_SINGLE([version],[],[Override the calendar version detected via: date --utc +'%Y.%m.%d'])
# ARG_OPTIONAL_SINGLE([profile],[],[One of 'debug', 'release', 'relwithdebinfo'])
# ARG_OPTIONAL_REPEATED([package],[],[Package names to update])
# ARG_OPTIONAL_SINGLE([message],[],[Message to add to the changelog])
# ARG_HELP([update-debian-changelog],[Updates debian changelog using debchange, but is much easier to use and is built for Netlify's packaging needs])
# ARGBASH_SET_INDENT([  ])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}


begins_with_short_option()
{
  local first_option all_short_options='h'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_distribution=
_arg_upstream=
_arg_revision=
_arg_version=
_arg_profile=
_arg_package=()
_arg_message=


print_help()
{
  printf '%s\n' "update-debian-changelog"
  printf 'Usage: %s [--distribution <arg>] [--upstream <arg>] [--revision <arg>] [--version <arg>] [--profile <arg>] [--package <arg>] [--message <arg>] [-h|--help]\n' "$0"
  printf '\t%s\n' "--distribution: One of 'nightly', 'pull-request', or 'stable' (no default)"
  printf '\t%s\n' "--upstream: Override the upstream version extracted from: configure.ac (no default)"
  printf '\t%s\n' "--revision: Override the revision detected via: date --utc +'%s' (no default)"
  printf '\t%s\n' "--version: Override the calendar version detected via: date --utc +'%Y.%m.%d' (no default)"
  printf '\t%s\n' "--profile: One of 'debug', 'release', 'relwithdebinfo' (no default)"
  printf '\t%s\n' "--package: Package names to update (empty by default)"
  printf '\t%s\n' "--message: Message to add to the changelog (no default)"
  printf '\t%s\n' "-h, --help: Prints help"
  printf '\n%s\n' "Updates debian changelog using debchange, but is much easier to use and is built for Netlify's packaging needs"
}


parse_commandline()
{
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      --distribution)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_distribution="$2"
        shift
        ;;
      --distribution=*)
        _arg_distribution="${_key##--distribution=}"
        ;;
      --upstream)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_upstream="$2"
        shift
        ;;
      --upstream=*)
        _arg_upstream="${_key##--upstream=}"
        ;;
      --revision)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_revision="$2"
        shift
        ;;
      --revision=*)
        _arg_revision="${_key##--revision=}"
        ;;
      --version)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_version="$2"
        shift
        ;;
      --version=*)
        _arg_version="${_key##--version=}"
        ;;
      --profile)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_profile="$2"
        shift
        ;;
      --profile=*)
        _arg_profile="${_key##--profile=}"
        ;;
      --package)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_package+=("$2")
        shift
        ;;
      --package=*)
        _arg_package+=("${_key##--package=}")
        ;;
      --message)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_message="$2"
        shift
        ;;
      --message=*)
        _arg_message="${_key##--message=}"
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
        ;;
    esac
    shift
  done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


report-error() {
  if [ -n "${GITHUB_ACTIONS}" ]; then
    echo "::error ::$1"
  fi
  die "$1"
}

declare -A distributions=([nightly]=1 [pull-request]=1 [stable]=1)
declare -A profiles=([relwithdebinfo]=1, [release]=1, [debug]=1)

test -n "${DEBFULLNAME}" || report-error "update-debian-changelog requires that \$DEBFULLNAME be set"
test -n "${DEBEMAIL}" || report-error "upddate-debian-changelog requires that \$DEBEMAIL be set"

test -n "${distributions[${_arg_distribution}]}" || report-error "'--distribution' must be one of ${!distributions[*]}"
test -n "${profiles[${_arg_profile}]}" || report-error "'--profile' must be one of ${!profiles[*]}"

upstream=${_arg_upstream:-$(sed -n -e 's/m4_define(\[TS_VERSION_S\],\[\(.*\)\])/\1/p' ${PWD}/configure.ac)}
revision=${_arg_revision:-$(date --utc +'%s')}
version=${_arg_version:-$(date --utc +'%Y.%m.%d')}
message="${version} ${_arg_message}"

for package in "${_arg_package[@]}"
do
  debchange \
    --newversion=1:${upstream}-${_arg_profile}+${version}~${revision} \
    --distribution=${_arg_distribution} \
    --force-distribution \
    --package=${package} \
    "${message}"
done

# ] <-- needed because of Argbash
