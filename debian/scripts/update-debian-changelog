#!/bin/bash

# ARG_OPTIONAL_SINGLE([distribution],[],[One of 'nightly', 'pull-request', or 'stable'])
# ARG_OPTIONAL_SINGLE([upstream],[],[Override the upstream version extracted from: configure.ac])
# ARG_OPTIONAL_SINGLE([revision],[],[Override the revision detected via: date --utc +'%s'])
# ARG_OPTIONAL_SINGLE([version],[],[Override the calendar version detected via: date --utc +'%Y.%m.%d'])
# ARG_OPTIONAL_SINGLE([profile],[],[One of 'debug', 'release', 'relwithdebinfo'])
# ARG_POSITIONAL_DOUBLEDASH([])
# ARG_POSITIONAL_SINGLE([message],[Message to add to the changelog],[""])
# ARG_HELP([update-debian-changelog],[Updates debian changelog using debchange, but is much easier to use and is built for Netlify's packaging needs])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_message=""
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_distribution=
_arg_upstream=
_arg_revision=
_arg_version=
_arg_profile=


print_help()
{
	printf '%s\n' "update-debian-changelog"
	printf 'Usage: %s [--distribution <arg>] [--upstream <arg>] [--revision <arg>] [--version <arg>] [--profile <arg>] [-h|--help] [--] [<message>]\n' "$0"
	printf '\t%s\n' "<message>: Message to add to the changelog (default: '""')"
	printf '\t%s\n' "--distribution: One of 'nightly', 'pull-request', or 'stable' (no default)"
	printf '\t%s\n' "--upstream: Override the upstream version extracted from: configure.ac (no default)"
	printf '\t%s\n' "--revision: Override the revision detected via: date --utc +'%s' (no default)"
	printf '\t%s\n' "--version: Override the calendar version detected via: date --utc +'%Y.%m.%d' (no default)"
	printf '\t%s\n' "--profile: One of 'debug', 'release', 'relwithdebinfo' (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\n%s\n' "Updates debian changelog using debchange, but is much easier to use and is built for Netlify's packaging needs"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		if test "$_key" = '--'
		then
			shift
			test $# -gt 0 || break
			_positionals+=("$@")
			_positionals_count=$((_positionals_count + $#))
			shift $(($# - 1))
			_last_positional="$1"
			break
		fi
		case "$_key" in
			--distribution)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_distribution="$2"
				shift
				;;
			--distribution=*)
				_arg_distribution="${_key##--distribution=}"
				;;
			--upstream)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_upstream="$2"
				shift
				;;
			--upstream=*)
				_arg_upstream="${_key##--upstream=}"
				;;
			--revision)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_revision="$2"
				shift
				;;
			--revision=*)
				_arg_revision="${_key##--revision=}"
				;;
			--version)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_version="$2"
				shift
				;;
			--version=*)
				_arg_version="${_key##--version=}"
				;;
			--profile)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_profile="$2"
				shift
				;;
			--profile=*)
				_arg_profile="${_key##--profile=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_message "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


report-error() {
  if [ -n "${GITHUB_ACTIONS}" ]; then
    echo "::error ::$1"
  fi
  die "$1"
}

printf 'Value of --%s: %s\n' 'revision' "$_arg_revision"

declare -A distributions=([nightly]=1 [pull-request]=1 [stable]=1)
declare -A profiles=([relwithdebinfo]=1, [release]=1, [debug]=1)

test -n "${DEBFULLNAME}" || report-error "update-debian-changelog requires that \$DEBFULLNAME be set"
test -n "${DEBEMAIL}" || report-error "upddate-debian-changelog requires that \$DEBEMAIL be set"

test -n "${distributions[${_arg_distribution}]}" || report-error "'${_arg_distribution}' must be one of ${!distributions[*]}"
test -n "${profiles[${_arg_profile}]}" || report-error "'${_arg_profile}' must be one of ${!profiles[*]}"


upstream=${_arg_upstream:-$(sed -n -e 's/m4_define(\[TS_VERSION_S\],\[\(.*\)\])/\1/p' ${GITHUB_WORKSPACE}/configure.ac)}
revision=${_arg_revision:-$(date --utc +'%s')}
version=${_arg_version:-$(date --utc +'%Y.%m.%d')}

debchange \
  --newversion=1:${upstream}-${_arg_profile}+${version}~${revision} \
  --distribution=${_arg_distribution} \
  --force-distribution \
  "${_arg_message}"

# ] <-- needed because of Argbash
