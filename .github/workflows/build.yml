# Improvements to be made still include:
# Using ccache until we are on CMake
# Moving to CMake for ATS 9
# Uploading PR packages directly to an s3 bucket for immediate usage
name: Build
on:
  workflow_dispatch:
    prerelease:
      description: "Is this a pre-release? (yes/no)"
      required: true
      default: "yes"
  push:
    branches:
      - 7.1.x-netlify
      - 9.0.x-netlify
  pull_request:
    branches:
      - readme-and-settings
      - 7.1.x-netlify
      - 9.0.x-netlify
env:
  DEBFULLNAME: 'github-actions[bot]'
  DEBEMAIL: '41898282+github-actions[bot]@users.noreply.github.com'
  DEBIAN_FRONTEND: noninteractive
  DPKG_COLORS: always
  TZ: UTC
jobs:
  # This is done so that all packages in this build have the EXACT same timestamps + versions
  calendar:
    name: Date and Time
    runs-on: ubuntu-20.04
    outputs:
      timestamp: ${{ steps.datetime.outputs.timestamp }}
      date: ${{ steps.datetime.outputs.date }}
      time: ${{ steps.datetime.outputs.time }}
    steps:
      - name: Get Current Date
        id: datetime
        run: |-
          time=$(date --date "1970-01-01 $(date +%T)" +%s)
          echo "::set-output name=timestamp::$(date --iso-8601=seconds)"
          echo "::set-output name=date::$(date --utc +%Y.%m.%d)"
          echo "::set-output name=time::${time}"
  build:
    name: Build TrafficServer
    needs: calendar
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true
      matrix:
        profile: [debug, release, relwithdebinfo]
    steps:
      - name: Setup Build Environment
        run: |-
          sudo apt-get update --quiet && sudo apt-get --yes --quiet upgrade
          sudo apt-get install --yes build-essential devscripts ccache git-buildpackage equivs debhelper
      - name: Setup Maintenance Script Path
        run: echo "::add-path::${{github.workspace}}/debian/scripts"
      - name: Setup GitHub Actions Bot
        run: |-
          git config --global user.name "$DEBFULLNAME"
          git config --global user.email "$DEBEMAIL"
      # NOTE: This doesn't appear to actually be working. Some investigation is
      # needed. If it doesn't improve, we'll have to figure something else out.
      # It doesn't help that the 
      - name: Setup Build Artifact Cache
        uses: actions/cache@v2
        with:
          path: ${{env.HOME}}/.ccache
          key: ${{matrix.profile}}-ccache-${{needs.calendar.outputs.timestamp}}
          restore-keys: |
            ${{matrix.profile}}-ccache-
      # TODO: Put most of this logic into a maintenance script.
      # GitHub Actions just don't serve our purpose too easily right now.
      #
      # For PRs against our branch
      - name: Checkout Upstream Branch
        uses: actions/checkout@v2
        if: github.base_ref == '7.1.x-netlify' || github.base_ref == '9.0.x-netlify'
        with:
          fetch-depth: 0
          clean: false
      - name: Checkout Debian Branch
        if: github.base_ref == '7.1.x-netlify' || github.base_ref == '9.0.x-netlify'
        run: git checkout origin/readme-and-settings -- debian
      # For manual testing/modifications to readme-and-settings branch
      - name: Checkout Upstream Branch
        if: github.base_ref != '7.1.x-netlify' || github.base_ref != '9.0.x-netlify'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: 7.1.x-netlify
          clean: false
      - name: Checkout Debian Branch
        if: github.base_ref != '7.1.x-netlify' || github.base_ref != '9.0.x-netlify'
        run: git checkout origin/${{ github.head_ref }} -- debian
      - name: Check Staged Index (Debugging)
        run: git status && ls -la
      - name: Select Upstream Branch
        uses: haya14busa/action-cond@v1
        id: upstream
        with:
          if_false: 7.1.x-netlify
          if_true: ${{ github.base_ref }}
          cond: ${{ github.event_name == 'pull-request' && github.base_ref != 'readme-and-settings' }}

      - name: Update Changelog Snapshot
        run: >-
          update-debian-changelog 
          --distribution=pull-request
          --version=${{needs.calendar.outputs.date}}
          --revision=${{needs.calendar.outputs.time}}
          --profile=${{matrix.profile}}
      - name: Build Package
        run: >-
          gbp buildpackage
          --git-verbose
          --git-debian-branch=${{github.head_ref}}
          --git-upstream-tag=${{steps.upstream.outputs.value}}
          --build-profiles=${{matrix.profile}}
          --buildinfo-option=-u${GITHUB_WORKSPACE}
          --changes-option=-u${GITHUB_WORKSPACE}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.profile}}
          path: |-
            ${{github.workspace}}/*.deb
            ${{github.workspace}}/*.ddeb
#      - name: Create Release (WIP)
#        uses: actions/github-script@v2
#        with:
#          script: |-
#            const fs = require('fs').promises;
#            const release = await github.repos.createRelease({
#
#            });
#  upload:
#    name: Package TrafficServer
#    needs: [build, calendar]
#    runs-on: ubuntu-20.04
#    steps:
#      - name: Download Artifacts
#      - name: Create Release
#        uses: actions/create-release@v1
#        id: release
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#          release_name: ${{ needs.calendar.output.date}}.${{needs.calendar.output.time}}
#          prerelease: ${{ github.event_name == 'pull_request' }}
#          tag_name: ${{ needs.calendar.output.date}}.${{needs.calendar.output.time}}
#      - name: Upload Packages
#        uses: actions/github-script@v2
#      - name: Display CCache Statistics (Debugging)
#        run: ccache --show-stats
#
#  package:
#    name: Package
#    needs: build
#    runs-on: ubuntu-20.04
#    steps:
#      - name: Create Release
#        uses: actions/create-release@v1
#        id: create-release
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#          release_name: ${{ needs.build.outputs.version }}-${{steps.package.outputs.tag}}
#          prerelease: 
#          tag_name: ${{needs.build.outputs.version}}-${{ steps.package.outputs.tag }}
#      - name: Upload Debian Package
#        uses: actions/github-script@v2
#        with:
#          result-encoding: json
#          script: |-
#            const fs = require('fs');
#            const contentType = 'application/vnd.debian.binary-package';
#            const uploadUrl = '${{ steps.create-release.outputs.upload_url }}';
#            for (const build_type of ['Debug', 'Release', 'RelWithDebInfo']) {
#              // Get each file that we've uploaded as an artifact
#              for (const directory of [`trafficserver-dev-${build_type}`, `trafficserver-${build_type}`]) {
#                for (const file of fs.readdirSync(`${{github.workspace}}/packages/${directory}`)) {
#                  const path = `${{github.workspace}}/packages/${directory}/${file}`
#                  core.info(`Reading ${path}`)
#                  const contentLength = fs.statSync(path).size;
#                  core.info(`contentLength: ${contentLength}`);
#                  const headers = { 'content-type': contentType, 'content-length': contentLength };
#                  const inputs = {
#                    url: uploadUrl,
#                    headers,
#                    label: directory,
#                    name: `${build_type}-${file}`,
#                    data: fs.readFileSync(path)
#                  };
#                  const {
#                    data: { browser_download_url: download_url }
#                  } = await github.repos.uploadReleaseAsset(inputs);
#                  core.info(`Asset ${file} with label ${directory} is available at ${download_url}`);
#                }
#              }
#            }
#
#
