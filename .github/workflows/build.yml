name: Build
on:
  push:
    branches:
      - 7.1.x-netlify
      - 9.0.x-netlify
  pull_request:
    branches:
      - readme-and-settings
      - 7.1.x-netlify
      - 9.0.x-netlify
  schedule:
    - cron: '5, 1,12 * * *'
jobs:
  package:
    name: Package
    needs: build
    runs-on: ubuntu-20.04
    #if: github.event_name == "push"
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: packages
      - name: Display Artifacts
        run: ls -R
      - name: Display Build Step Outputs
        run: |-
          echo "release: ${{ needs.build.outputs.release }}"
          echo "version: ${{ needs.build.outputs.version }}"
      - name: Fixup Package Versions
        shell: bash
        run: |-
          shopt -s globstar
          set -e
          for package in **/**.deb
          do
            directory=$(dirname ${package})
            filename=$(basename ${package})
            pushd ${directory}
            echo Fixing up ${package}
            fakeroot mkdir -p tmp
            fakeroot dpkg-deb -R ${filename} tmp
            sed -i '$s:netlify.*:${{ needs.build.outputs.release}}:' tmp/DEBIAN/control
            fakeroot dpkg-deb --build tmp temporary.deb
            fakeroot dpkg-name temporary.deb
            rm ${filename}
            popd
          done
      #- name: Create Release
      #  uses: actions/create-release@v1
      #  id: create-release
      #  with:
      #    release_name: ${{ needs.build.outputs.version }}
      #    prerelease: ${{ github.event_name == "pull_request" }}
      #    tag_name: ${{ github.ref }}
      # We can't use upload-release-asset because there are multiple files
      - name: Upload Debian Package
        uses: actions/github-script@v2
        with:
          result-encoding: json
          script: |-
            const fs = require('fs');
            const contentType = 'application/vnd.debian.binary-package';
            const uploadUrl = ''; //'${{ steps.create-release.outputs.upload_url }}';
            const directories = ['Debug', 'Release', 'RelWithDebInfo']
              .flatMap(build => [`trafficserver-dev-${build}`, `trafficserver-${build}`]);

            // Get each file that we've uploaded as an artifact
            for (const directory of directories) {
              for (const file of fs.readdirSync(`${{github.workspace}}/packages/${directory}`)) {
                const path = `${{github.workspace}}/packages/${directory}/${file}`
                const contentLength = fs.statSync(path).size;
                const headers = { 'content-type': contentType, 'content-length': contentLength };
                const inputs = {
                  url: uploadUrl,
                  headers,
                  label: directory,
                  name: file,
                  file: fs.readFileSync(path)
                };
                core.info(`${inputs}`);
                //const response = await github.repos.uploadReleaseAsset(inputs);
              }
            }

  build:
    name: Build
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true
      matrix:
        # TODO: Remove development files from non-dev form
        package-name: [trafficserver-dev, trafficserver]
        build-type: [Debug, Release, RelWithDebInfo]
        include:
          - build-type: Debug
            build-flags: "-Og -ggdb -fno-omit-frame-pointer"
            CONFIGURE_OPTS: "--enable-asan --enable-debug"
            LSAN_OPTIONS: "detect_leaks=0"
          - build-type: Release
            build-flags: "-O2 -DNDEBUG"
          - build-type: RelWithDebInfo
            build-flags: "-O2 -ggdb -DNDEBUG"
    env:
      CXX: g++-9
      CC: gcc-9
    outputs:
      version: ${{ steps.info.outputs.version }}
      release: ${{ steps.info.outputs.release }}
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v2
        if: github.base_ref != 'readme-and-settings'
      - name: Checkout Branch
        if: github.base_ref == 'readme-and-settings'
        uses: actions/checkout@v2
        with:
          ref: 7.1.x-netlify
      - name: Setup Build Environment
        run: |
          sudo apt update && sudo apt -y upgrade
          sudo apt install -y build-essential autoconf automake libtool pkg-config
          sudo apt install -y software-properties-common ca-certificates apt-transport-https curl wget
          sudo apt install -y lsb-release lz4 zstd
          sudo apt install g++-9 gcc-9
      - name: Install Dependencies
        run: >
          sudo apt install -y
          libjpeg-turbo8-dev
          libmysqlclient-dev
          libluajit-5.1-dev
          libyaml-cpp-dev
          libunwind8-dev
          libexpat1-dev
          libhwloc-dev
          libgeoip-dev
          libpcre3-dev
          liblzma-dev
          libcap-dev
          libssl-dev
          libb64-dev
          libpng-dev
          zlib1g-dev
          tcl-dev
      - name: Generate Configure Script
        run: autoreconf --install --force
      - name: Configure
        run: >-
          ${{ github.workspace }}/configure
          --prefix=/opt/ts
          --enable-experimental-plugins
          ${{ matrix.CONFIGURE_OPTS }}
        working-directory: ${{ github.workspace }}/build
        env:
          CXXFLAGS: >-
            -std=c++17
            -Wall
            -Wextra
            -Wno-deprecated-copy
            -Wno-ignored-qualifiers
            -Wno-unused-parameter
            -Wno-format-truncation
            -Wno-cast-function-type
            -Wno-stringop-overflow
            -Wno-invalid-offsetof
            -Wno-cpp
            -fno-strict-aliasing
            -Dmy_bool=int
            -mcx16
            ${{ matrix.build-flags }}
      - name: Build TrafficServer
        run: make -j VERBOSE=1
        working-directory: ${{ github.workspace }}/build
        env:
          LSAN_OPTIONS: ${{ matrix.LSAN_OPTIONS }}
      - name: Acquire Package Info
        working-directory: ${{ github.workspace }}/build
        shell: bash
        id: info
        run: |-
          traffic_ctl=$(find $PWD -name traffic_ctl \( ! -regex '.*/\..*' \) -type f -executable)
          seconds=$(date -u --date="1970-01-01 UTC $(date -u +%T)" +%s)
          release=netlify+$(date +'%Y.%m.%d')~${seconds}
          version=$(${traffic_ctl} --version | sed -E 's/[^0-9]+(([0-9]+[.]){2}[0-9]+).*$/\1/')
          echo "::set-output name=filename::${{ matrix.package-name }}_${version}_amd64"
          echo "::set-output name=version::${version}"
          echo "::set-output name=release::${release}"
      - name: Install to Staging Area
        run: make install DESTDIR=${{github.workspace}}/${{ steps.info.outputs.filename }}
        working-directory: ${{ github.workspace }}/build
      - name: Generate Package Manifest # NOTE: We use an epoch (1:) because we differ from ubuntu versioning
        run: |-
          mkdir -p ${{steps.info.outputs.filename}}/DEBIAN
          tee ${{steps.info.outputs.filename}}/DEBIAN/control <<- EOF
          Package: netlify-${{ matrix.package-name}}
          Section: devel
          Priority: optional
          Architecture: amd64
          Maintainer: Isabella Muerte <imuerte>
          Depends: libssl1.1,
            libluajit-5.1.2,
            libhwlock15,
            libunwind8,
            libgeoip1,
            libcurl4,
            liblzma5,
            libpcre3,
            libcap2
          Conflicts: ${{ matrix.package-name }}
          Replaces: ${{ matrix.package-name }}
          Breaks: ${{ matrix.package-name }}
          Description: Netlify TrafficServer Distribution
           This is the Netlify Inc. fork of Apache TrafficServer.
          Version: 1:${{ steps.info.outputs.version }}-${{steps.info.outputs.release}}
          EOF
      - name: Create Debian Package
        run: dpkg-deb --build --verbose ${{ steps.info.outputs.filename }}
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.package-name }}-${{matrix.build-type}}
          path: ${{ github.workspace }}/**/*.deb
