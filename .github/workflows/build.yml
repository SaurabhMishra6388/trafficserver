# Improvements to be made still include:
# Using ccache until we are on CMake
# Moving to CMake for ATS 9
# Uploading PR packages directly to an s3 bucket for immediate usage
name: Build
on:
  workflow_dispatch:
    prerelease:
      description: "Is this a pre-release? (yes/no)"
      required: true
      default: "yes"
  push:
    branches:
      - 7.1.x-netlify
      - 9.0.x-netlify
  pull_request:
    branches:
      - readme-and-settings
      - 7.1.x-netlify
      - 9.0.x-netlify
jobs:
  calendar:
    name: Date and Time
    runs-on: ubuntu-20.04
    outputs:
      date: ${{ steps.datetime.outputs.date }}
      time: ${{ steps.datetime.outputs.time }}
    steps:
      - name: Get Current Date
        id: datetime
        run: |-
          time=$(date --utc --date '1970-01-01 UTC $(date --utc +%T)' +%s)
          date=$(date --utc +%Y.%m.%d)
          echo "::set-output name=time::${time}"
          echo "::set-output name=date::${date}"
  build:
    name: Build TrafficServer
    needs: calendar
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true
      matrix:
        build-type: [debug, release, relwithdebinfo]
        # TODO: We might be able to move all of these 'flags' inside the rules
        #       file and depend on DEB_BUILD_PROFILES
        include:
          - build-type: debug
            configure: '--enable-asan --enable-debug'
            cxxflags: '-Og -ggdb -fno-omit-frame-pointer'
          - build-type: release
            cxxflags: '-O2 -DNDEBUG'
          - build-type: relwithdebinfo
            cxxflags: '-O2 -ggdb -DNDEBUG'
    env:
      DEBFULLNAME: 'github-actions[bot]'
      DEBEMAIL: '41898282+github-actions[bot]@users.noreply.github.com'
      DPKG_COLORS: always
      TZ: UTC
      CXX: g++-9
      CC: gcc-9
    outputs:
      version: ${{ steps.info.outputs.version }}
      release: ${{ steps.info.outputs.release }}
    steps:
      - name: Setup Build Environment
        run: |-
          sudo apt update && sudo apt -y upgrade
          sudo apt-get install --yes build-essential devscripts ccache git-buildpackage
      - name: Checkout PR Branch
        uses: actions/checkout@v2
        if: github.base_ref != 'readme-and-settings' || github.ref != 'readme-and-settings'
      - name: Checkout Workflow Branch
        uses: actions/checkout@v2
        if: github.base_ref == 'readme-and-settings' || github.ref == 'readme-and-settings'
        with:
          ref: 7.1.x-netlify
      - name: Setup GitHub Actions Bot
        run: |-
          git config user.name "$DEBFULLNAME"
          git config user.email "$DEBEMAIL"
      # TODO: Put this into a maintainer script of some kind :P
      #       Some of these values need to be calculated in a separte step
      #       as outputs. Most could be done separate from the date and time
      #       job as well as the build job
      # NOTE: Some of the information here might be wrong for the --since field
      - name: Update Changelog
        run: >-
          gbp dch
            --debian-branch=${{ format('{0}{1}', '{{ github.base_ref }}', '{{ github.event.inputs.branch }}') }}
            --new-version=1:${{steps.info.outputs.extracted-version }}-${{matrix.build-type}}+${{needs.calendar.outputs.date}}~${{needs.calendar.outputs.time}}
            --spawn-editor=never
            --since=${{ github.ref }}
      - name: Build Package
        run: gbp buildpackage
    steps:
      - name: Build TrafficServer
        run: make -j VERBOSE=1
        working-directory: ${{ github.workspace }}/build
        env:
          LSAN_OPTIONS: ${{ matrix.LSAN_OPTIONS }}
      - name: Acquire Package Info
        working-directory: ${{ github.workspace }}/build
        shell: bash
        id: info
        run: |-
          traffic_ctl=$(find $PWD -name traffic_ctl \( ! -regex '.*/\..*' \) -type f -executable)
          seconds=$(date -u --date="1970-01-01 UTC $(date -u +%T)" +%s)
          release=netlify+$(date +'%Y.%m.%d')~${seconds}
          version=$(${traffic_ctl} --version | sed -E 's/[^0-9]+(([0-9]+[.]){2}[0-9]+).*$/\1/')
          echo "::set-output name=filename::${{ matrix.package-name }}_${version}_amd64"
          echo "::set-output name=version::${version}"
          echo "::set-output name=release::${release}"
      - name: Install to Staging Area
        run: make install DESTDIR=${{github.workspace}}/${{ steps.info.outputs.filename }}
        working-directory: ${{ github.workspace }}/build
      - name: Create Debian Package
        run: dpkg-deb --build --verbose ${{ steps.info.outputs.filename }}
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.package-name }}-${{matrix.build-type}}
          path: ${{ github.workspace }}/**/*.deb
  package:
    name: Package
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: packages
      - name: Generate Package Version
        id: package
        run: |-
          seconds=$(date -u --date="1970-01-01 UTC $(date -u +%T)" +%s)
          release=netlify+$(date +'%Y.%m.%d')
          echo "::set-output name=release::${release}~${seconds}"
          echo "::set-output name=tag::${release}.${seconds}"
      - name: Display Artifacts
        run: ls -R
      - name: Display Build Step Outputs
        run: |-
          echo "release: ${{ needs.build.outputs.release }}"
          echo "version: ${{ needs.build.outputs.version }}"
      - name: Fixup Package Versions
        shell: bash
        run: |-
          shopt -s globstar
          set -e
          for package in **/**.deb
          do
            directory=$(dirname ${package})
            filename=$(basename ${package})
            pushd ${directory}
            echo Fixing up ${package}
            fakeroot mkdir -p tmp
            fakeroot dpkg-deb -R ${filename} tmp
            sed -i '$s:netlify.*:${{ steps.package.outputs.release }}:' tmp/DEBIAN/control
            fakeroot dpkg-deb --build tmp temporary.deb
            fakeroot dpkg-name temporary.deb
            rm ${filename}
            rm -r tmp
            popd
          done
      - name: Create Release
        uses: actions/create-release@v1
        id: create-release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          release_name: ${{ needs.build.outputs.version }}-${{steps.package.outputs.tag}}
          prerelease: ${{ github.event_name == 'pull_request' || github.event.inputs.prerelease == 'yes' }}
          tag_name: ${{needs.build.outputs.version}}-${{ steps.package.outputs.tag }}
      - name: Upload Debian Package
        uses: actions/github-script@v2
        with:
          result-encoding: json
          script: |-
            const fs = require('fs');
            const contentType = 'application/vnd.debian.binary-package';
            const uploadUrl = '${{ steps.create-release.outputs.upload_url }}';
            for (const build_type of ['Debug', 'Release', 'RelWithDebInfo']) {
              // Get each file that we've uploaded as an artifact
              for (const directory of [`trafficserver-dev-${build_type}`, `trafficserver-${build_type}`]) {
                for (const file of fs.readdirSync(`${{github.workspace}}/packages/${directory}`)) {
                  const path = `${{github.workspace}}/packages/${directory}/${file}`
                  core.info(`Reading ${path}`)
                  const contentLength = fs.statSync(path).size;
                  core.info(`contentLength: ${contentLength}`);
                  const headers = { 'content-type': contentType, 'content-length': contentLength };
                  const inputs = {
                    url: uploadUrl,
                    headers,
                    label: directory,
                    name: `${build_type}-${file}`,
                    data: fs.readFileSync(path)
                  };
                  const {
                    data: { browser_download_url: download_url }
                  } = await github.repos.uploadReleaseAsset(inputs);
                  core.info(`Asset ${file} with label ${directory} is available at ${download_url}`);
                }
              }
            }


